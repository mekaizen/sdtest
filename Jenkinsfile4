pipeline {
    agent any

    environment {
        // SonarQube token (stored in Jenkins credentials)
        SONAR_TOKEN = credentials('SONAR_TOKEN')
        DOCKER_IMAGE = 'doc18/mtapp'  // Your application Docker image
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the GitHub repository
               // git url: 'https://github.com/mekaizen/sdtest.git'
                git branch: 'main', url: 'https://github.com/mekaizen/sdtest.git'

            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image for the app
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                script {
                    // Run the application in Docker
                    sh 'docker run --network jenkins-sonar-network -d --name app -p 8084:8084 ${DOCKER_IMAGE}'

                    // Run SonarQube Scanner inside Docker
                    docker.image('sonarsource/sonar-scanner-cli').inside('--network jenkins-sonar-network') {
                        sh """
                        sonar-scanner \
                        -Dsonar.projectKey=sdlc-app \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://172.18.0.3:9000 \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('ZAP Security Scan') {
            steps {
                script {
                    // Start the ZAP Docker container
                    docker.image('owasp/zap2docker-stable').inside('--network jenkins-sonar-network') {
                        sh """
                        zap-baseline.py -t http://app:8084 -r zap_report.html
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Cleanup: Remove Docker containers after execution
            sh 'docker stop app || true && docker rm app || true'
            archiveArtifacts artifacts: 'zap_report.html', allowEmptyArchive: true
        }
    }
}
