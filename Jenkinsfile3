pipeline {
     agent {
         docker {
                     image 'docker:20.10.7-dind'
                     image 'maven:3.9.8-eclipse-temurin-21'
                     args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
                 }
        }

    tools{
      maven 'maven'
      }

      environment {
              SONAR_TOKEN = credentials('SONAR_TOKEN')
          }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mekaizen/sdtest.git'
            }
        }

        stage('Build') {
                    steps {
                        sh 'mvn clean package'
                    }
                }
                stage('Test') {
                    steps {
                        sh 'mvn test'
                    }
                }


  stage('SAST Scan') {
            steps {
                sh '''

                   #  mvn -Dmaven.test.failure.ignore verify sonar:sonar \
                 mvn -Dmaven.test.failure.ignore verify org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
                           -Dsonar.login=$SONAR_TOKEN \
                           -Dsonar.projectKey=sdlc-test \
                           -Dsonar.host.url=http://172.18.0.3:9000 \
                           -Dsonar.ws.timeout=180
                '''
            }
        }


stage('Start Application') {
            steps {
                script {
                    // Start the application for testing locally on port 8081
                sh '''
                                nohup java -jar target/sdlc-test-0.0.1-SNAPSHOT.jar --server.port=8084 > app.log 2>&1 &
                            '''
                            // Increase sleep time to ensure application fully starts
                            sleep 10
                }
            }
        }



  stage('Verify Application Running') {
            steps {
                script {
                    // Check if the application is running and accessible on port 8081
                    sh '''
                        curl -I http://localhost:8084 || {
                            echo "Application is not running!"
                            exit 1
                        }
                    '''
                }
            }
        }


           stage('Check Application Logs') {
                    steps {
                        script {
                           // Output the application logs
                            sh 'cat app.log'
                        }
                    }
                }


stage('ZAP Security Scan') {
            steps {
                script {
                    //Run ZAP as a Docker container
                 sh '''
                   docker run --network host zaproxy/zap-stable zap-baseline.py -t http://localhost:8084 -r zap-report.html
                    '''
                    }
                }
            }



stage('Post ZAP Scan Actions') {
            steps {
               // Archive the ZAP report
                archiveArtifacts artifacts: 'zap-report.html', allowEmptyArchive: true
               //Optionally, you can use warnings plugins or parse the report for vulnerabilities.
            }
        }
















    }









     post {
            success {
                echo 'Build, test, and ZAP scan passed'
            }
            failure {
                echo 'Build failed'
            }
            always {
                script {
                    sh '''
                  # docker container prune -f
                    # Check if the process exists before killing
                       pid=$(ps aux | grep 'sdlc-test.jar' | grep -v 'grep' | awk '{print $2}')
                       if [ -n "$pid" ]; then
                           kill $pid
                       else
                           echo "Process not found, skipping kill."
                       fi

                #    kill $(ps aux | grep 'sdlc-test.jar' | awk '{print $2}')
                    '''
                }
            }
        }
}
